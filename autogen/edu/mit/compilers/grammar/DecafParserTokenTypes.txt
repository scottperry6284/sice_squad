// $ANTLR 2.7.7 (2006-11-01): parser.g -> DecafParserTokenTypes.txt$
DecafParser    // output token vocab name
TK_class="class"=4
LCURLY("{")=5
RCURLY("}")=6
WS_=7
SL_COMMENT=8
CHARLITERAL=9
STRINGLITERAL=10
DECIMALLITERAL=11
HEXLITERAL=12
IDSTRING=13
RESERVED_TRUE=14
RESERVED_FALSE=15
RESERVED_BOOL=16
RESERVED_BREAK=17
RESERVED_IMPORT=18
RESERVED_CONTINUE=19
RESERVED_ELSE=20
RESERVED_FOR=21
RESERVED_WHILE=22
RESERVED_IF=23
RESERVED_INT=24
RESERVED_RETURN=25
RESERVED_LEN=26
RESERVED_VOID=27
ID=28
DIV=29
MULT=30
PERCENT=31
SEMICOLON=32
LBRACKET=33
RBRACKET=34
LPAREN=35
RPAREN=36
COMMA=37
ANDAND=38
OROR=39
OPERATOR=40
PLUSEQUALS=41
MINUSEQUALS=42
DECREMENT=43
INCREMENT=44
PLUS=45
MINUS=46
LEQ=47
NEQ=48
EQUALITY=49
GEQ=50
LESS=51
GREATER=52
ASSIGNMENT=53
NOT=54
ESC=55
CHARINTERNAL=56
LETTER=57
NONLETTER=58
NOTALETTERORDIGIT=59
DIGIT=60
HEXDIGIT=61
SKIPPABLE=62
BADTOKEN=63
AST_program=64
AST_import_decl=65
AST_field_decl=66
AST_method_decl=67
AST_method_param=68
AST_block=69
AST_type=70
AST_statement_assignment=71
AST_statement_method_call=72
AST_statement_if=73
AST_statement_for=74
AST_statement_while=75
AST_statement_return=76
AST_statement_break=77
AST_statement_continue=78
AST_assign_expr=79
AST_assign_op=80
AST_compound_assign_op=81
AST_method_call=82
AST_method_params_none=83
AST_method_params_local=84
AST_method_params_import=85
AST_expr=86
AST_import_arg=87
AST_bin_op=88
AST_arith_op=89
AST_rel_op=90
AST_eq_op=91
AST_cond_op=92
AST_location_array=93
AST_location_noarray=94
AST_char_literal=95
AST_bool_literal=96
AST_int_literal=97
